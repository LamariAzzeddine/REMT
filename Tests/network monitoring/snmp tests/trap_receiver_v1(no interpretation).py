from pysnmp.entity import engine, config
from pysnmp.carrier.asyncore.dgram import udp
from pysnmp.entity.rfc3413 import ntfrcv
from pysnmp.proto.api import v2c

#works !!!
'''

trapsess -v 3 -u roadmin -l authPriv -a SHA -x AES 192.168.69.44:162
snmptrap -v3 -u roadmin -l authPriv -a SHA -A admin123 -x AES -X admin123 -e 0x80001f8880ad8ba63fe904de6500000000 192.168.69.44:162 123 1.3.6.1.6.3.1.1.5.1
snmpinform -v3 -u roadmin -l authPriv -a SHA -A admin123 -x AES -X admin123 192.168.69.44 6969 1.3.6.1.6.3.1.1.5.1

getting the engine id: 
sudo grep oldEngineID /var/lib/net-snmp/snmpd.conf
remember to remove the 0x !!!!
'''
# Create SNMP engine with autogenerated engineID and pre-bound
# to socket transport dispatcher
snmpEngine = engine.SnmpEngine()

# Transport setup
# UDP over IPv4
config.addTransport(
    snmpEngine,
    udp.domainName,
    udp.UdpTransport().openServerMode(('127.0.0.1', 162))
)

# SNMPv3/USM setup
# Define SNMPv3 user
config.addV3User(
    snmpEngine, 'roadmin',
    config.usmHMACSHAAuthProtocol, 'admin123',
    config.usmAesCfb128Protocol, 'admin123',   
    securityEngineId=v2c.OctetString(hexValue='80001f8880ad8ba63fe904de6500000000')
)

# Callback function for receiving notifications
def cbFun(snmp_engine, state_reference, context_engine_id, context_name,
          var_binds, cb_ctx):
    print('Received SNMP Trap:')
    for name, val in var_binds:
        print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))


# Register SNMP Application at the SNMP engine
ntfrcv.NotificationReceiver(snmpEngine, cbFun)

snmpEngine.transportDispatcher.jobStarted(1)  # this job would never finish

# Run I/O dispatcher which would receive queries and send confirmations
try:
    snmpEngine.transportDispatcher.runDispatcher()
except:
    snmpEngine.transportDispatcher.closeDispatcher()
    raise
