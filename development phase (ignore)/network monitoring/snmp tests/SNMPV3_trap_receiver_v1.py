from pysnmp.entity import engine, config
from pysnmp.carrier.asyncore.dgram import udp
from pysnmp.entity.rfc3413 import ntfrcv
from pysnmp.proto.api import v2c
import datetime




# Callback function for receiving notifications
def cbFun(snmp_engine, state_reference, context_engine_id, context_name,
          var_binds, cb_ctx):
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(current_time, 'Received SNMP Trap from:', context_engine_id.prettyPrint())
    
    # Extract message from var_binds
    message_oid = '1.3.6.1.4.1.8072.9999.9999'  #message OID is fixed
    message = None
    for name, val in var_binds:
        if str(name) == message_oid:
            message = val.prettyPrint()
            break
    
    # Print message
    if message is not None:
        print('Message:', message)
    else:
        print('No message found in the trap.')

# Create SNMP engine with autogenerated engineID and pre-bound
# to socket transport dispatcher
snmpEngine = engine.SnmpEngine()

# Transport setup
# UDP over IPv4
config.addTransport(
    snmpEngine,
    udp.domainName,
    udp.UdpTransport().openServerMode(('0.0.0.0', 162))
)

# SNMPv3/USM setup
# Define SNMPv3 user
config.addV3User(
    snmpEngine, 'roadmin',
    config.usmHMACSHAAuthProtocol, 'admin123',
    config.usmAesCfb128Protocol, 'admin123',   
    securityEngineId=v2c.OctetString(hexValue='80001f8880ad8ba63fe904de6500000000')
)

# Register SNMP Application at the SNMP engine
ntfrcv.NotificationReceiver(snmpEngine, cbFun)

# Run I/O dispatcher which would receive queries and send confirmations
try:
    snmpEngine.transportDispatcher.jobStarted(1)  # this job would never finish
    snmpEngine.transportDispatcher.runDispatcher()
except Exception as e:
    print("Error:", e)
finally:
    snmpEngine.transportDispatcher.closeDispatcher()
